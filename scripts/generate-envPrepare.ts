import fs from 'fs';
import path from 'path';
import localPackage from '../package.json';

// =================================================================
// ==                           Version                           ==
// =================================================================
const { version } = localPackage;

fs.writeFileSync(
  path.join(__dirname, '..', 'components', 'version', 'version.ts'),
  `export default '${version}';`,
  'utf8',
);

// =================================================================
// ==                          StyleKeys                          ==
// =================================================================
const MIN_CHAR_SIZE = 7;

// When style name length <= 7, we just ignore it since it's smaller.
const KEY_LIST = [
  'WebkitBackfaceVisibility',
  'WebkitBoxOrient',
  'WebkitLineClamp',
  'WebkitTapHighlightColor',
  'WebkitTransformStyle',
  'alignItems',
  'alignSelf',
  'all',
  'animationDelay',
  'animationDirection',
  'animationDuration',
  'animationFillMode',
  'animationIterationCount',
  'animationName',
  'animationPlayState',
  'animationTimingFunction',
  'appearance',
  'background',
  'backgroundClip',
  'backgroundColor',
  'backgroundImage',
  'backgroundPosition',
  'backgroundRepeat',
  'backgroundSize',
  'border',
  'borderBlockEnd',
  'borderBlockEndColor',
  'borderBlockEndWidth',
  'borderBlockStart',
  'borderBlockStartColor',
  'borderBlockStartWidth',
  'borderBottom',
  'borderBottomColor',
  'borderBottomWidth',
  'borderCollapse',
  'borderColor',
  'borderEndEndRadius',
  'borderEndStartRadius',
  'borderInlineEnd',
  'borderInlineEndColor',
  'borderInlineEndWidth',
  'borderInlineStart',
  'borderInlineStartColor',
  'borderInlineStartWidth',
  'borderLeft',
  'borderLeftColor',
  'borderRadius',
  'borderRight',
  'borderRightColor',
  'borderSpacing',
  'borderStartEndRadius',
  'borderStartStartRadius',
  'borderStyle',
  'borderTop',
  'borderTopColor',
  'borderTopWidth',
  'borderWidth',
  'bottom',
  'boxShadow',
  'boxSizing',
  'clear',
  'color',
  'columnGap',
  'container',
  'content',
  'cursor',
  'direction',
  'display',
  'fill',
  'filter',
  'flex',
  'flexBasis',
  'flexDirection',
  'flexFlow',
  'flexGrow',
  'flexShrink',
  'flexWrap',
  'float',
  'fontFamily',
  'fontSize',
  'fontStretch',
  'fontStyle',
  'fontVariant',
  'fontWeight',
  'gap',
  'height',
  'inset',
  'insetBlock',
  'insetBlockEnd',
  'insetBlockStart',
  'insetInline',
  'insetInlineEnd',
  'insetInlineStart',
  'justifyContent',
  'justifyItems',
  'left',
  'letterSpacing',
  'lineHeight',
  'listStyle',
  'listStylePosition',
  'listStyleType',
  'margin',
  'marginBlock',
  'marginBlockEnd',
  'marginBlockStart',
  'marginBottom',
  'marginInline',
  'marginInlineEnd',
  'marginInlineStart',
  'marginLeft',
  'marginRight',
  'marginTop',
  'mask',
  'maxHeight',
  'maxWidth',
  'minHeight',
  'minWidth',
  'objectFit',
  'opacity',
  'order',
  'outline',
  'outlineColor',
  'overflow',
  'overflowWrap',
  'overflowX',
  'overflowY',
  'padding',
  'paddingBlock',
  'paddingBlockStart',
  'paddingBottom',
  'paddingInline',
  'paddingInlineEnd',
  'paddingInlineStart',
  'paddingLeft',
  'paddingRight',
  'paddingTop',
  'pointerEvents',
  'position',
  'resize',
  'right',
  'rowGap',
  'stroke',
  'tabSize',
  'tableLayout',
  'textAlign',
  'textDecoration',
  'textDecorationSkipInk',
  'textIndent',
  'textOverflow',
  'textRendering',
  'textShadow',
  'textTransform',
  'top',
  'touchAction',
  'transform',
  'transformOrigin',
  'transition',
  'transitionDuration',
  'transitionTimingFunction',
  'userSelect',
  'verticalAlign',
  'visibility',
  'whiteSpace',
  'width',
  'willChange',
  'wordBreak',
  'wordWrap',
  'writingMode',
  'zIndex',
].filter((key) => key.length > MIN_CHAR_SIZE);

const sheet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

const styleMap: Record<string, string> = {};
KEY_LIST.forEach((key, index) => {
  const id =
    (index >= sheet.length ? sheet[Math.floor(index / sheet.length) - 1] : '') +
    sheet[index % sheet.length];

  styleMap[key] = id;
});

const sheetPath = path.join(__dirname, '..', 'components', 'style', 'sheet.ts');

const SHEET_COMMENT = '/** Auto Generated By `generate-envPrepare` */';
let sheetReplaceStart = false;
const sheetFileLines: string[] = [];
fs.readFileSync(sheetPath, 'utf8')
  .split(/\n/)
  .forEach((line) => {
    if (line.includes(SHEET_COMMENT)) {
      if (sheetReplaceStart) {
        sheetReplaceStart = false;

        sheetFileLines.push(SHEET_COMMENT);
        sheetFileLines.push(`const styleMap = {`);
        Object.keys(styleMap).forEach((key) => {
          sheetFileLines.push(`  ${key}: '${styleMap[key]}',`);
        });
        sheetFileLines.push(`} as const;`);
        sheetFileLines.push(SHEET_COMMENT);
      } else {
        sheetReplaceStart = true;
      }
      return;
    }

    if (sheetReplaceStart) {
      return;
    }

    sheetFileLines.push(line);
  });

fs.writeFileSync(sheetPath, sheetFileLines.join('\n'), 'utf8');

// Write tmp file
fs.writeFileSync(
  // Write in `~tmpSheet.json`
  path.join(__dirname, '..', '~tmpSheet.json'),
  JSON.stringify(styleMap, null, 2),
  'utf8',
);
